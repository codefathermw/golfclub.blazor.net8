@page "/fitting-tasks/{FittingRefNumber?}"
@using GolfClub.BLL.Enums
@using GolfClub.BLL.Services.Fittings
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@inject IFittingService fittingService
@inject NavigationManager navigationManager

<PageTitle>Manage Fitting Tasks</PageTitle>

<div class="p-3">
    @if (FittingRefNumber is null)
    {
        <div class="col-12 modal-dialog-centered p-3">
            <div class="col-6 mx-auto text-center">
                <p class="lead">Please select a fitting request to update tasks.</p>
                <NavLink class="btn btn-outline-primary mx-auto text-center" href="fitting-requests">Go to Fittings Request</NavLink>
            </div>
        </div>
    }
    else if (!IsRefNumberValid)
    {
        <div class="col-12 modal-dialog-centered p-3">
            <div class="col-6 mx-auto text-center">
                <p class="lead">Invalid Reference Number provided, please select another fitting request.</p>
                <NavLink class="btn btn-outline-primary mx-auto text-center" href="fitting-requests">Go to Fittings Request</NavLink>
            </div>
        </div>
    }
    else
    {
        <h2 class="text-success mb-3">Fitting Tasks for Request No: @FittingRefNumber</h2>
        <p class="mb-4">Below is a list of tasks associated with this fitting request. </p>
        <h5 class="mb-3">Task List</h5>
        <ul class="list-group">
            @foreach (var item in fittingTasks)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <p class="mb-1 font-weight-normal">@item.Value</p>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => UpdateTask(item.Key)">Update Status</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public string? FittingRefNumber { get; set; }
    public string errorMessage { get; set; } = null!;
    public bool IsRefNumberValid { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (FittingRefNumber is not null)
        {
            var response = await fittingService.GetFittingByReferenceNumberAsync(FittingRefNumber);
            IsRefNumberValid = !response.IsErrorOccurred;          
        }
    }

    public Dictionary<StatusEnum, string> fittingTasks = new ()
        {
            { StatusEnum.Acknowledged, "Fitting Request Acknowledged" },
            { StatusEnum.Prepped, "Fitting being prepped" },
            { StatusEnum.Scheduled, "Fitting Scheduled" },
            { StatusEnum.Cancelled, "Fitting Cancelled" },
            { StatusEnum.Suspended, "Fitting Suspended" },
            { StatusEnum.Completed, "Fitting Completed" }
        };

    private async Task UpdateTask(StatusEnum status)
    {
        var response = await fittingService.UpdateFittingStatusAsync(FittingRefNumber!, status);

        if (response.IsErrorOccurred)
        {
            errorMessage = response.Message;
            return;
        }

        navigationManager.NavigateTo("/fitting-requests");
    }
}