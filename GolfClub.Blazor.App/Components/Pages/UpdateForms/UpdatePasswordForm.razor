@using GolfClub.BLL.Helpers
@using GolfClub.BLL.Services.Users
@using GolfClub.Blazor.App.Domain.Models
@inject IUserService userService;

<p class="mb-4">Update your password here</p>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="mb-3">
            <label for="old-password" class="form-label">Old Password</label>
            <InputText id="old-password" type="password" class="form-control" @bind-Value="model.OldPassword" />
            <ValidationMessage For="@(() => model.OldPassword)" />
        </div>
    </div>
    <div class="row">
        <div class="mb-3">
            <label for="new-password" class="form-label">New Password</label>
            <InputText id="new-password" type="password" class="form-control" @bind-Value="model.NewPassword" />
            <ValidationMessage For="@(() => model.NewPassword)" />
        </div>
    </div>
    <div class="row">
        <div class="mb-3">
            <label for="repeat-password" class="form-label">Repeat Password</label>
            <InputText id="repeat-password" type="password" class="form-control" @bind-Value="model.RepeatPassword" />
            <ValidationMessage For="@(() => model.RepeatPassword)" />
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public required int UserId { get; set; }
    [SupplyParameterFromForm]
    private UpdatePasswordModel model { get; set; } = new();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
    }

    public async Task<BaseResponse<string>?> HandleValidSubmit()
    {
        editContext?.Validate();

        var validationMessages = editContext?.GetValidationMessages();

        if (validationMessages is null || !validationMessages.Any())
            return await userService.UpdatePasswordAsync(new ()
            {
                 UserId = UserId!,
                 OldPassword = model.OldPassword,
                 NewPassword = model.NewPassword
            });

        return null;
    }
}
