@using GolfClub.BLL.Helpers
@using GolfClub.BLL.Services.Users
@using GolfClub.Blazor.App.Components.Modals
@using GolfClub.Blazor.App.Components.Pages.UpdateForms
@using GolfClub.Blazor.App.Domain.Enums
@using GolfClub.Blazor.App.Domain.Helpers
@using GolfClub.DAL.Models
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IUserService userService;

@if (UserProfile is null)
{
    <p>Please wait...</p>
}
else
{
    <ModalComponent IsVisible="@isModalVisible" Title="@editFormTitle" @ref="modal">
        <BodyContent>
            <div class="px-3">
                @if (isError)
                {
                    <div class="alert alert-danger alert-dismissible show" role="alert">
                        <span>@message</span>
                        <button type="button" class="btn-close btn-sm" @onclick="CloseAlert"></button>
                    </div>                    
                }

                @if (editActionEnum == ProfileEditActionEnum.Personal)
                {
                    <UpdateProfileForm UserProfile="@UserProfile" @ref="profileForm" />
                }
                else if (editActionEnum == ProfileEditActionEnum.Contacts)
                {
                    <UpdateContactsForm UserProfile="@UserProfile" @ref="contactsForm" />
                }
                else if (editActionEnum == ProfileEditActionEnum.Password)
                {
                    <UpdatePasswordForm UserId="@UserProfile.UserId" @ref="passwordForm" />
                }
            </div>
        </BodyContent>
        <FooterContent>
            <button class="btn btn-primary" @onclick="Submit">Save</button>
        </FooterContent>
    </ModalComponent>

    <div class="p-3">
        <h3 class="text-success">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    Customer
                </Authorized>
                <NotAuthorized>
                    My
                </NotAuthorized>
            </AuthorizeView>
            Profile
        </h3>

        <div class="justify-content-between d-flex mb-4">
            <div class="my-3">
                <h5>@UIHelper.NotAvail(UserProfile.FirstName!) @UIHelper.NotAvail(UserProfile.LastName!)</h5>
                <h6 class="font-weight-normal text-muted">Member</h6>
            </div>
            <div>
                <AuthorizeView Roles="Admin">
                    <NotAuthorized>
                        <button class="btn btn-sm btn-success" @onclick="() => EditAction(ProfileEditActionEnum.Password)">
                            <i class="bi bi-pencil"></i> Change Password
                        </button>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>

        <hr style="border-color: #ccc!important;" />

        <div class="justify-content-between d-flex mb-4">
            <h5 class="text-success">Personal Information</h5>
            <button class="btn btn-sm btn-success" @onclick="() => EditAction(ProfileEditActionEnum.Personal)">
                <i class="bi bi-pencil"></i> Edit
            </button>
        </div>

        <div class="row">
            <div class="col-5">
                <label class="text-black-50 mb-1">First Name</label>
                <p>@UIHelper.NotAvail(UserProfile.FirstName)</p>
            </div>
            <div class="col-5">
                <label class="text-black-50 mb-1">Last Name</label>
                <p>@UIHelper.NotAvail(UserProfile.LastName)</p>
            </div>
        </div>
        <div class="row">
            <div class="col-5">
                <label class="text-black-50 mb-1">Date of Birth</label>
                <p>@(UserProfile.DateOfBirth is not null ? UserProfile.DateOfBirth.Value.ToString("dd-MM-yyyy") : "N/A")</p>
            </div>
            <div class="col-5">
                <label class="text-black-50 mb-1">Physical Address</label>
                <p>@UIHelper.NotAvail(UserProfile.Address!)</p>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-5">
                <label class="text-black-50 mb-1">Golf Club Size</label>
                <p>@UIHelper.NotAvail(UserProfile.GolfClubSize!)</p>
            </div>
        </div>

        <hr style="border-color: #ccc!important;" />

        <div class="justify-content-between d-flex mb-4">
            <h5 class="text-success">Contact Information</h5>
            <button class="btn btn-sm btn-success" @onclick="() => EditAction(ProfileEditActionEnum.Contacts)">
                <i class="bi bi-pencil"></i> Edit
            </button>
        </div>

        <div class="row mb-3">
            <div class="row mb-3">
                <div class="col-5">
                    <label class="text-black-50 mb-1">Email Address</label>
                    <p>@UIHelper.NotAvail(UserProfile.Email)</p>
                </div>
                <div class="col-5">
                    <label class="text-black-50 mb-1">Phone Number</label>
                    <p>@UIHelper.NotAvail(UserProfile.Phone!)</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int userId { get; set; }
    private UserProfile? UserProfile { get; set; }
    private ModalComponent? modal;
    private UpdateProfileForm? profileForm;
    private UpdateContactsForm? contactsForm;
    private UpdatePasswordForm? passwordForm;
    private bool isError = false;
    private bool isModalVisible = false;
    private string editFormTitle = string.Empty;
    private string message = string.Empty;
    public ProfileEditActionEnum editActionEnum = ProfileEditActionEnum.None;

    protected override async Task OnInitializedAsync()
    {
        var response = await userService.GetUserProfileAsync(userId);

        if (response.IsErrorOccurred)
        {
            NavigationManager.NavigateTo("/error");
            return;
        }

        UserProfile = response.Result;
    }

    private async Task Submit()
    {
        BaseResponse<string>? response = null;

        @if (editActionEnum == ProfileEditActionEnum.Personal)
        {
            response = await profileForm!.HandleValidSubmit();
        }
        else if (editActionEnum == ProfileEditActionEnum.Contacts)
        {
            response = await contactsForm!.HandleValidSubmit();
        }
        else if (editActionEnum == ProfileEditActionEnum.Password)
        {
            response = await passwordForm!.HandleValidSubmit();
        }

        if (response is not null)
        {
            isError = response.IsErrorOccurred;
            message = response.Message;

            if (!isError)
                await modal!.CloseModal();
        }
        else
        {
            isError = false;            
        }
    }

    private void EditAction(ProfileEditActionEnum action)
    {
        editActionEnum = action;
        editFormTitle = action switch
        {
            ProfileEditActionEnum.Password => "Change Password",
            ProfileEditActionEnum.Personal => "Edit Personal Information",
            ProfileEditActionEnum.Contacts => "Edit Contact Information",
            _ => "Edit Profile"
        };
        isModalVisible = true;
    }

    private void CloseAlert()
    {
        isError = false;
    }
}