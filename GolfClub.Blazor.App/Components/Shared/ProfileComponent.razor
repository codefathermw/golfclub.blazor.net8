@using GolfClub.BLL.Enums
@using GolfClub.BLL.Helpers
@using GolfClub.BLL.Services.Users
@using GolfClub.Blazor.App.Components.Modals
@using GolfClub.Blazor.App.Components.Pages.UpdateForms
@using GolfClub.DAL.Models
@rendermode InteractiveServer

@inject NavigationManager NavigationManager;
@inject IUserService userService;

@if (User is null)
{
    <p>Please wait...</p>
}
else
{
    <ModalComponent IsVisible="@isVisible" Title="@editFormTitle" @ref="modal">
        <BodyContent>
            <div class="@(!showErrorAlert ? "d-none" : null)">
                <div class="alert alert-danger alert-dismissible fade @(showErrorAlert ? "show" : "")" role="alert">
                    <span>@message</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
            @if (editActionEnum == ProfileEditActionEnum.Personal)
            {
                <UpdateProfileForm UserProfile="@User" @ref="profileForm"/>
            }
            else if (editActionEnum == ProfileEditActionEnum.Contacts)
            {
                <UpdateContactsForm UserProfile="@User" @ref="contactsForm"/>
            }
            else if (editActionEnum == ProfileEditActionEnum.Password)
            {
                <UpdatePasswordForm UserProfile="@User" @ref="passwordForm"/>
            }
        </BodyContent>
        <FooterContent>
            <button class="btn btn-primary" @onclick="Submit">Save Changes</button>
        </FooterContent>
    </ModalComponent>

    <div class="p-3">
        <h3 class="text-success">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    Customer
                </Authorized>
                <NotAuthorized>
                    My
                </NotAuthorized>
            </AuthorizeView>
            Profile
        </h3>

        <div class="justify-content-between d-flex mb-4">
            <div class="my-3">
                <h5>@UIHelper.NotAvail(User.FirstName!) @UIHelper.NotAvail(User.LastName!)</h5>
                <h6>Member</h6>
            </div>
            <div>
                <AuthorizeView Roles="Admin">
                    <NotAuthorized>
                        <button class="btn btn-sm btn-success" @onclick="() => EditAction(ProfileEditActionEnum.Password)">
                            <i class="bi bi-pencil"></i> Change Password
                        </button>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>

        <hr />

        <div class="justify-content-between d-flex mb-4">
            <h5 class="text-success">Personal Information</h5>
            <button class="btn btn-sm btn-success" @onclick="() => EditAction(ProfileEditActionEnum.Personal)">
                <i class="bi bi-pencil"></i> Edit
            </button>
        </div>

        <div class="row">
            <div class="col-5">
                <label class="text-black-50 mb-1">First Name</label>
                <p>@UIHelper.NotAvail(User.FirstName)</p>
            </div>
            <div class="col-5">
                <label class="text-black-50 mb-1">Last Name</label>
                <p>@UIHelper.NotAvail(User.LastName)</p>
            </div>
        </div>
        <div class="row">
            <div class="col-5">
                <label class="text-black-50 mb-1">Date of Birth</label>
                <p>@(User.DateOfBirth is not null ? User.DateOfBirth.Value.ToString("dd-MM-yyyy") : "N/A")</p>
            </div>
            <div class="col-5">
                <label class="text-black-50 mb-1">Physical Address</label>
                <p>@UIHelper.NotAvail(User.Address!)</p>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-5">
                <label class="text-black-50 mb-1">Golf Club Size</label>
                <p>@UIHelper.NotAvail(User.GolfClubSize)</p>
            </div>
        </div>

        <hr style="border-color: #cc!important;" />

        <div class="justify-content-between d-flex mb-4">
            <h5 class="text-success">Contact Information</h5>
            <button class="btn btn-sm btn-success" @onclick="() => EditAction(ProfileEditActionEnum.Contacts)">
                <i class="bi bi-pencil"></i> Edit
            </button>
        </div>

        <div class="row mb-3">
            <div class="row mb-3">
                <div class="col-5">
                    <label class="text-black-50 mb-1">Email Address</label>
                    <p>@UIHelper.NotAvail(User.Email)</p>
                </div>
                <div class="col-5">
                    <label class="text-black-50 mb-1">Phone Number</label>
                    <p>@UIHelper.NotAvail(User.Phone)</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int userId { get; set; }
    private UserProfile? User { get; set; }
    private bool isVisible = false;
    public ProfileEditActionEnum editActionEnum = ProfileEditActionEnum.None;
    private string editFormTitle = string.Empty;
    private UpdateProfileForm profileForm;
    private UpdateContactsForm contactsForm;
    private UpdatePasswordForm passwordForm;
    private ModalComponent modal;
    private bool showErrorAlert = false;
    private bool isError = false;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var response = await userService.GetUserProfileAsync(userId);

        if (response.IsErrorOccurred)
        {
            NavigationManager.NavigateTo("/error");
            return;
        }

        User = response.Result;
    }

    private async Task Submit()
    {
        BaseResponse<string>? response = null;

        @if (editActionEnum == ProfileEditActionEnum.Personal)
        {
            response = await profileForm.HandleValidSubmit();
        }
        else if (editActionEnum == ProfileEditActionEnum.Contacts)
        {
            response = await contactsForm.HandleValidSubmit();
        }
        else if (editActionEnum == ProfileEditActionEnum.Password)
        {
            response = await passwordForm.HandleValidSubmit();
        }

        if (response is not null)
        {
            showErrorAlert = response.IsErrorOccurred;
            message = response.Message;

            if (!showErrorAlert)
            {
                await modal.CloseModal();
            }
        }

        showErrorAlert = false;
    }

    private void EditAction(ProfileEditActionEnum action)
    {
        editActionEnum = action;
        editFormTitle = action switch
        {
            ProfileEditActionEnum.Password => "Change Password",
            ProfileEditActionEnum.Personal => "Edit Personal Information",
            ProfileEditActionEnum.Contacts => "Edit Contact Information",
            _ => "Edit Profile"
        };
        isVisible = true;
    }
}

